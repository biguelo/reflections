
How is the staging area different from the working directory and the repository? 
What value do you think it offers?
	
	The staging area is like a middle man between the working directory and
	the repository. It helps separate changes that are been tracked from the
	one that are not, before commiting then to the repository.

How can you use the staging area to make sure you have one commit per logical change?

	Comparing the version of a file in the staging area with the one already commited
	(in the repository), it's possible to determine the size of the change to be 
	commited. If the changes to the file are too big or too small, you can remove
	the file from the staging area and add it again when the changes are the right
	size.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

	Branches are helpful when trying to experiment with new features, have a version
	of the program in other language, to add features to the program that are not
	part of the main requirement but can be useful to explore.

	Branches can help, because it allows you to create an independent path (version)
	of the program, is like a new child that inherits from the father (main path)
	but is looking to have its own history.

How do the diagrams help you visualize the branch structure?
	
	The diagrams give you a graphical representation of the different branches in the
	repository, that makes easier to identify the point in time where the
	branches where created, and which commits were made before and after the branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Git's automatic merging is a great tool because it joins to branches without the
	intervention of the authors, base in a simple and logica set of rules, and in case
	of any conflict between the versions being merged, it points the author to the conflict
	so he can deside what is the final version that he wants to keep. On the other hand, 
	doing merge manually give the author more control but requires more time and merges
	with small changes in order to allow the author to make the merges avoiding mistakes.  
